{
  "openapi": "3.0.1",
  "info": {
    "title": "People Management API",
    "description": "This API exposes endpoints to manage people score and address data.",
    "termsOfService": "https://www.serasa.com.br/",
    "contact": {
      "name": "Cadastra People",
      "url": "https://www.serasa.com.br/",
      "email": "people@gmail.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://choosealicense.com/licenses/mit/"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Server URL in Development environment"
    }
  ],
  "tags": [
    {
      "name": "Person",
      "description": "People management endpoint"
    },
    {
      "name": "Authentication",
      "description": "Auth management endpoint"
    }
  ],
  "paths": {
    "/api/persons/{id}": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Retrieve person",
        "description": "Search person by id",
        "operationId": "getPersonById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Person"
        ],
        "summary": "Update person",
        "description": "Admin user update person by id",
        "operationId": "updatePerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Person id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register a user",
        "description": "Temporary resource to create a new user, pasword and role.",
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Sign in",
        "description": "Log in with username and password and return token",
        "operationId": "authenticate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/createperson": {
      "post": {
        "tags": [
          "Person"
        ],
        "summary": "Create a new person register",
        "description": "Admin user register a new person",
        "operationId": "createPerson",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/persons/{id}/soft-delete": {
      "patch": {
        "tags": [
          "Person"
        ],
        "summary": "Logical delete person",
        "description": "Admin user delete logically person by id",
        "operationId": "softDeletePerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/persons/{id}/score": {
      "patch": {
        "tags": [
          "Person"
        ],
        "summary": "Patch update person score",
        "description": "Admin user patch update person score by id",
        "operationId": "updateScore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Person id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "newScore",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/persons": {
      "get": {
        "tags": [
          "Person"
        ],
        "summary": "Get all persons",
        "description": "Retrieve a paginated list of persons based on optional filters",
        "operationId": "getPersons",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the person to filter by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "John Doe"
          },
          {
            "name": "age",
            "in": "query",
            "description": "Age of the person to filter by",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 30
          },
          {
            "name": "cep",
            "in": "query",
            "description": "CEP of the person to filter by",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "12345-678"
          },
          {
            "name": "pageable",
            "in": "query",
            "description": "Pagination information",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of persons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonDTO"
                },
                "example": {
                  "content": [
                    {
                      "id": 1,
                      "name": "John Doe",
                      "age": 30,
                      "cep": "12345-678"
                    }
                  ],
                  "pageable": "INSTANCE",
                  "totalPages": 1,
                  "totalElements": 1,
                  "last": true,
                  "size": 20,
                  "number": 0,
                  "sort": {
                    "sorted": true,
                    "unsorted": false,
                    "empty": false
                  },
                  "first": true,
                  "numberOfElements": 1,
                  "empty": false
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddressDTO": {
        "type": "object",
        "properties": {
          "cep": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "neighborhood": {
            "type": "string"
          },
          "street": {
            "type": "string"
          }
        }
      },
      "PersonDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "phone": {
            "type": "string"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          },
          "scoreDescription": {
            "type": "string"
          }
        }
      },
      "SignUpRequest": {
        "required": [
          "password",
          "role",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int32"
          },
          "phone": {
            "type": "string"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GrantedAuthority": {
        "type": "object",
        "properties": {
          "authority": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "USER"
            ]
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "authorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantedAuthority"
            }
          },
          "accountNonExpired": {
            "type": "boolean"
          },
          "credentialsNonExpired": {
            "type": "boolean"
          },
          "accountNonLocked": {
            "type": "boolean"
          }
        }
      },
      "LoginUserDTO": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
